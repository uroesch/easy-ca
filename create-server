#!/usr/bin/env bash
# Derek Moore <derek.moore@gmail.com>
# Changed by fcgdam

# -----------------------------------------------------------------------------
# Setup
# -----------------------------------------------------------------------------
set -o errexit
set -o nounset
set -o pipefail

# -----------------------------------------------------------------------------
# Globals
# -----------------------------------------------------------------------------
declare -r SCRIPT=${0##*/}
declare -- CERT_TYPE=sever
declare -- CERT_DESCRIPTION="server"
declare -r CERT_SUFFIX=server
declare -- CN=
declare -x SAN="${SAN:-}"
declare -r SAN_PREFIX="DNS"
declare -- BIN_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
declare -x PKCS12_PASS="${PKCS12_PASS:-}"
declare -- PKCS12=false
declare -- APPEND_CHAIN=false

# -----------------------------------------------------------------------------
# Functions
# -----------------------------------------------------------------------------
function usage() {
  local exit_code=${1:-1}
  cat <<USAGE

  Usage:
    ${SCRIPT} -s SERVER_NAME [[-S SAN] ...] [-h]

  Description:
    Issues a server ${CERT_DESCRIPTION} certificate for SERVER_NAME.

  Options:
    -h | --help            This message.
    -c | --cn COMMON_NAME  Server hostname (commonName) for the certificate.
    -s | --san SAN         Set a subject alternative name for the certificate.
                           Can be used muliple times.
    -p | --pkcs12          Create a pkcs12 bundle from key and cert.
    -a | --append-chain    Append chain if ca/chain.pm exists.


USAGE
  exit ${exit_code}
}

function parse_options() {
  while (( $# > 0 )); do
    case ${1} in
    -c|--cn)           shift; CN=${1};;
    -s|--san)          shift; SAN="${SAN}, ${SAN_PREFIX}:${1}";;
    -p|--pkcs12)       PKCS12=true;;
    -a|--append-chain) APPEND_CHAIN=true;;
    -h|--help)         usage 0;;
    *)                 usage 1;;
    esac
    shift
  done
}

function validate_options() {
  if [[ -z ${CN} ]]; then
    usage 1
  fi
}

function determine_operation_mode() {
  case ${SCRIPT} in
  *-server)
    CERT_TYPE=server
    CERT_DESCRIPTION="server"
    ;;
  *-ssl)
    CERT_TYPE=ssl
    CERT_DESCRIPTION="server SSL"
    ;;
  esac
}

function source_files() {
  source ${BIN_DIR}/functions
  [[ -f "${BIN_DIR}/defaults.conf" ]] &&
    source ${BIN_DIR}/defaults.conf
}

# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------
parse_options "${@}"
validate_options
determine_operation_mode
source_files
assemble_san

# Sanitize the commonName to make it suitable for use in filenames
SAFE_NAME=$(to_safe_name "${CN}")

message \
  "Creating new SSL server certificate for:" \
  "commonName: '${CN}'" \
  "subjectAltName: '${SAN}'"

pushd ${BIN_DIR}/.. > /dev/null

check_existing_configuration "${SAFE_NAME}" server
ask_ca_passphrase 'signing'

# Generate the server openssl config
export CA_HOSTNAME=${CN}
template "${BIN_DIR}/templates/${CERT_TYPE}.tpl" "conf/${SAFE_NAME}.server.conf"

# Create the server key and csr and sign it
create_csr "server" "${SAFE_NAME}"
sign_csr "server" "${SAFE_NAME}"
append_ca_chain
create_pkcs12
popd > /dev/null
message "Server certificate created."
