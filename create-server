#!/usr/bin/env bash
# Derek Moore <derek.moore@gmail.com>
# Changed by fcgdam

# -----------------------------------------------------------------------------
# Setup
# -----------------------------------------------------------------------------
set -o errexit
set -o nounset
set -o pipefail

# -----------------------------------------------------------------------------
# Globals
# -----------------------------------------------------------------------------
declare -r SCRIPT=${0##*/}
declare    CERT_TYPE=sever
declare    CERT_DESCRIPTION="server"
declare    SERVER_NAME=
declare    ALT_NAME=
declare    BIN_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)

# -----------------------------------------------------------------------------
# Functions
# -----------------------------------------------------------------------------
function usage() {
  local exit_code=${1:-1}
  cat <<USAGE

  Usage:
    ${SCRIPT} -s SERVER_NAME [-a ALT_NAME]...

  Issues a server ${CERT_DESCRIPTION} certificate for SERVER_NAME

  Options:
    -s SERVER_NAME  Server hostname (commonName) for the new cert
    -a ALT_NAME     One (or more) subjectAltNames for the new cert (optional)
USAGE
  exit ${exit_code}
}

function parse_options() {
  while getopts hs:a: flag; do
    case ${flag} in
    s) SERVER_NAME=${OPTARG}
      if [ -z "${ALT_NAME}" ]; then
        ALT_NAME="DNS:${OPTARG}"
      else
        ALT_NAME="${ALT_NAME}, DNS:${OPTARG}"
      fi
      ;;
    a)
      if [ -z "${ALT_NAME}" ]; then
        ALT_NAME="DNS:${OPTARG}"
      else
        ALT_NAME="${ALT_NAME}, DNS:${OPTARG}"
      fi
      ;;
    h) usage 0;;
    *) usage 1;;
    esac
  done
}

function validate_options() {
  if [[ -z ${SERVER_NAME} ]]; then
    usage 1
  fi
}

function determine_operation_mode() {
  case ${SCRIPT} in
  *-server)
    CERT_TYPE=server
    CERT_DESCRIPTION="server"
    ;;
  *-ssl)
    CERT_TYPE=ssl
    CERT_DESCRIPTION="server SSL"
    ;;
  esac
}

function source_files() {
  source ${BIN_DIR}/functions
  [[ -f "${BIN_DIR}/defaults.conf" ]] &&
    source ${BIN_DIR}/defaults.conf
}

# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------
parse_options "${@}"
validate_options
determine_operation_mode
source_files

# Sanitize the commonName to make it suitable for use in filenames
SAFE_NAME=$(to_safe_name "${SERVER_NAME}")

message \
  "Creating new SSL server certificate for:" \
  "commonName: '${SERVER_NAME}'" \
  "subjectAltName: '${ALT_NAME}'"

pushd ${BIN_DIR}/.. > /dev/null

check_existing_configuration "${SAFE_NAME}" server
ask_ca_passphrase 'signing'

# Generate the server openssl config
export CA_HOSTNAME=${SERVER_NAME}
export SAN=${ALT_NAME}
template "${BIN_DIR}/templates/${CERT_TYPE}.tpl" "conf/${SAFE_NAME}.server.conf"

# Create the server key and csr and sign it
create_csr "server" "${SAFE_NAME}"
sign_csr "server" "${SAFE_NAME}"
popd > /dev/null
message "Server certificate created."
