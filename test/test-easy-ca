#!/usr/bin/env bash

# -----------------------------------------------------------------------------
# Setup
# -----------------------------------------------------------------------------
set -o errexit
set -o nounset
set -o pipefail

trap test::final-message EXIT

# -----------------------------------------------------------------------------
# Globals
# -----------------------------------------------------------------------------
declare -r TEST_SCRIPT=${0##*/}
declare -r WORK_DIR="$(dirname ${0})/.."
declare -r TEMP_DIR=${HOME}/tmp
declare -r PREFIX_DIR=easy-ca-
declare -r BASE_DIR=${TEMP_DIR}/${PREFIX_DIR}${RANDOM}
declare -r ROOT_CA_DIR=${BASE_DIR}/root
declare -r SIGNING_CA_DIR=${BASE_DIR}/signing
declare -r DELIMITER=$(printf "%0.1s" -{1..80})
declare    FINAL_MESSAGE=true

# used for setting the password for they CA keys and pkcs12 creation
export CA_PASS=@T0pS3cr3t
export CA_PARENT_PASS=@T0pS3cr3t
export PKCS12_PASS=Acm3@Passw0rd

# -----------------------------------------------------------------------------
# Functions
# -----------------------------------------------------------------------------
function ---- { printf "%0.1s" -{1..80}; printf "\n"; }

function usage() {
  local exit_code=${1:-1}
  FINAL_MESSAGE=false
  cat <<USAGE

  Usage:
    ${TEST_SCRIPT} [options]

  Options:
    -c | --clean   Cleanup previous test directories
    -h | --help    This message

USAGE
  exit ${exit_code}
}

function parse_options() {
  (( ${#} == 0 )) && return 0
  while (( ${#} > 0 )); do
    case ${1} in
    -c|--clean) test::clean;;
    -h|--help)  usage 0;;
    *)          usage 0;;
    esac
    shift
  done
}

function module_name() {
  echo ${FUNCNAME[2]}
}

function test::clean() {
  local dirs=$(find ${TEMP_DIR} -maxdepth 1 -type d -name "${PREFIX_DIR}*")
  for dir in ${dirs}; do
    echo "Removing directory '${dir}'"
    rm -rf ${dir}
  done
  FINAL_MESSAGE=false
  exit 0
}

function test::setup() {
  [[ ! -d ${BASE_DIR} ]] && mkdir -p ${BASE_DIR}
}

function test::certificate-file() {
  local certificate=${1}; shift;
  test -f $(test::certificate-path ${certificate})
}

function test::san() {
  local certificate="${1}"; shift;
  local prefix="${1}"; shift;
  local -a san=( "$@" )
  for entry in "${san[@]}"; do
    test::dump-certificate "${certificate}" | \
      grep -q "${prefix}:${entry}"
  done
}

function test::certificate-path() {
  local certificate="${1}"; shift;
  case ${certificate} in
  *.crt) echo ${SIGNING_CA_DIR}/certs/${certificate};;
  *.p12) echo ${SIGNING_CA_DIR}/pkcs12/${certificate};;
  esac
}

function test::dump-certificate() {
  local certificate=${1}; shift;
  openssl x509 \
    -noout \
    -text \
    -in $(test::certificate-path ${certificate})
}

function test::fetch-serial() {
  local certificate=${1}; shift;
  openssl x509 \
    -noout \
    -serial \
    -in ${SIGNING_CA_DIR}/certs/${certificate} | \
    awk -F = '{print $2}'
}

function test::create-root-ca() {
  echo ca-pass ${CA_PASS}
  printf "%0.0s\n" {0..11} | \
    ${WORK_DIR}/create-root-ca -d ${ROOT_CA_DIR}
}

function test::create-signing-ca() {
  printf "%0.0s\n" {0..11} | \
    ${ROOT_CA_DIR}/bin/create-signing-ca -d ${SIGNING_CA_DIR}
}

function test::create-server() {
  printf "%0.0s\n" {0..6} | \
    ${SIGNING_CA_DIR}/bin/create-server "$@"
}

function test::verify-server() {
  local certificate=${1}; shift;
  local -a san=( "$@" )
  test::certificate-file "${certificate}"
  test::san "${certificate}" "DNS" "${san[@]:-}"
}

function test::create-ssl() {
  printf "%0.0s\n" {0..6} | \
    ${SIGNING_CA_DIR}/bin/create-ssl "$@"
}

function test::verify-ssl() {
  local certificate=${1}; shift;
  test::certificate-file "${certificate}"
  test::dump-certificate "${certificate}" | \
    grep -q "Netscape Cert Type"
}

function test::create-client() {
  printf "%0.0s\n" {0..6} | \
    ${SIGNING_CA_DIR}/bin/create-client "$@"
}

function test::verify-client() {
  local certificate=${1}; shift;
  local -a san=( "$@" )
  test::certificate-file "${certificate}"
  test::san "${certificate}" "email" "${san[@]:-}"
}

function test::verify-pkcs12() {
  local pkcs12=${1}; shift;
  test::certificate-file "${pkcs12}"
  openssl pkcs12 \
   -in "$(test::certificate-path "${pkcs12}")" \
   -password env:PKCS12_PASS \
   -passout env:PKCS12_PASS \
   &>/dev/null
}

function test::verify-cachain() {
  local certificate=${1}; shift;
  local cert_path="$(test::certificate-path "${certificate}")"
  test::certificate-file "${certificate}"
  # To verify we use the certificate twice since the whole chain
  # must be included.
  openssl verify -CAfile "${cert_path}" "${cert_path}"
}

function test::revoke-cert() {
  local certificate=${1}; shift;
  printf "1\ny\n" | \
    ${SIGNING_CA_DIR}/bin/revoke-cert \
    -C ${SIGNING_CA_DIR}/certs/${certificate}
}

function test::verify-revokation() {
  local certificate=${1}; shift;
  local serial=$(test::fetch-serial ${certificate})

  openssl crl \
    -noout \
    -text \
    -in ${SIGNING_CA_DIR}/crl/ca.crl | \
    grep -q "Serial Number: ${serial}"
}

function test::usage() {
  local -a scripts=( "$@" )
  for script in "${scripts[@]}"; do
    ${SIGNING_CA_DIR}/bin/${script} -h
  done
}

function test::final-message() {
  local exit_code=$?
  [[ ${FINAL_MESSAGE} != true ]] && return 0
  if (( ${exit_code} > 0 )); then
    echo -e "\e[31m"
    ----
    echo "There were errors in '$(module_name)' while executing the test suite"
    ----
    echo -e "\e[0m"
  else
    echo -e "\e[32m"
    ----
    echo All tests passed
    ----
    echo -e "\e[0m"
  fi
  exit ${exit_code}
}

# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------
parse_options "$@"
test::setup
test::create-root-ca
test::create-signing-ca
# server cert creation and revocation
test::create-server --cn '*.acme.com' --san 'acme.com' --append-chain
test::verify-server 'star-acme-com.server.crt' {\*.,}acme.com
test::verify-cachain 'star-acme-com.server.crt'
test::revoke-cert 'star-acme-com.server.crt'
test::verify-revokation 'star-acme-com.server.crt'
# ssl cert creation and revocation
test::create-ssl --cn 'ssl.acme.com' --san 'acme.com' --append-chain
test::verify-ssl 'ssl-acme-com.server.crt'
test::verify-cachain 'ssl-acme-com.server.crt'
test::revoke-cert 'ssl-acme-com.server.crt'
# client cert creation and revocation
test::verify-revokation 'ssl-acme-com.server.crt'
test::create-client --cn 'bob@acme.com' --name 'bob_builder' --append-chain
test::verify-client 'bob-builder.client.crt'
test::verify-cachain 'bob-builder.client.crt'
test::revoke-cert 'bob-builder.client.crt'
test::verify-revokation 'bob-builder.client.crt'
#
test::create-client --cn 'bobby@acme.com' --san 'b@acme.com'
test::verify-client 'bobby-acme-com.client.crt' 'b@acme.com'
test::revoke-cert 'bobby-acme-com.client.crt'
test::verify-revokation 'bobby-acme-com.client.crt'
#
test::create-client --cn 'pkcs12@acme.com' --pkcs12
test::verify-client 'pkcs12-acme-com.client.crt'
test::verify-pkcs12 'pkcs12-acme-com.client.p12'
test::revoke-cert 'pkcs12-acme-com.client.crt'
test::verify-revokation 'pkcs12-acme-com.client.crt'
# usage check
test::usage \
  create-client \
  create-root-ca \
  create-server \
  create-signing-ca \
  create-ssl \
  revoke-cert
