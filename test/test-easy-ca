#!/usr/bin/env bash

# -----------------------------------------------------------------------------
# Setup
# -----------------------------------------------------------------------------
set -o errexit
set -o nounset
set -o pipefail

trap test::final_message EXIT

# -----------------------------------------------------------------------------
# Globals
# -----------------------------------------------------------------------------
declare -r TEST_SCRIPT=${0##*/}
declare -r WORK_DIR="$(dirname ${0})/.."
declare -r TEMP_DIR=${HOME}/tmp
declare -r PREFIX_DIR=easy-ca-
declare -r BASE_DIR=${TEMP_DIR}/${PREFIX_DIR}${RANDOM}
declare -r ROOT_CA_DIR=${BASE_DIR}/root
declare -r SIGNING_CA_DIR=${BASE_DIR}/signing
declare -r DELIMITER=$(printf "%0.1s" -{1..80})
declare    FINAL_MESSAGE=true

# -----------------------------------------------------------------------------
# Functions
# -----------------------------------------------------------------------------
function usage() {
  local exit_code=${1:-1}
  FINAL_MESSAGE=false
  cat <<USAGE

  Usage:
    ${TEST_SCRIPT} [options]

  Options:
    -c | --clean   Cleanup previous test directories
    -h | --help    This message

USAGE
  exit ${exit_code}
}

function parse_options() {
  (( ${#} == 0 )) && return 0
  while (( ${#} > 0 )); do
    case ${1} in
    -c|--clean) test::clean;;
    -h|--help)  usage 0;;
    *)          usage 0;;
    esac
    shift
  done
}

function module_name() {
  echo ${FUNCNAME[2]}
}

function test::clean() {
  local dirs=$(find ${TEMP_DIR} -maxdepth 1 -type d -name "${PREFIX_DIR}*")
  for dir in ${dirs}; do
    echo "Removing directory '${dir}'"
    rm -rf ${dir}
  done
  FINAL_MESSAGE=false
  exit 0
}

function test::setup() {
  [[ ! -d ${BASE_DIR} ]] && mkdir -p ${BASE_DIR}
}

function test::alternatives() {
  local options=( "${@}" )
  local alternatives=
  for option in "${options[@]}"; do
    alternatives+="-a ${option}"
  done
  echo ${alternatives}
}

function test::dump_certificate() {
  local certificate=${1}; shift;
  openssl x509 \
    -noout \
    -text \
    -in ${SIGNING_CA_DIR}/certs/${certificate}
}

function test::fetch_serial() {
  local certificate=${1}; shift;
  openssl x509 \
    -noout \
    -serial \
    -in ${SIGNING_CA_DIR}/certs/${certificate} | \
    awk -F = '{print $2}'
}

function test::create_root_ca() {
  printf "%0.0s\n" {0..10} | \
    ${WORK_DIR}/create-root-ca -d ${ROOT_CA_DIR}
}

function test::create_signing_ca() {
  printf "%0.0s\n" {0..11} | \
    ${ROOT_CA_DIR}/bin/create-signing-ca -d ${SIGNING_CA_DIR}
}

function test::create_server_certificate() {
  local server_name="${1}"; shift;
  local alternatives=$(test::alternatives "${@}")
  printf "%0.0s\n" {0..6} | \
    ${SIGNING_CA_DIR}/bin/create-server -s "${server_name}" ${alternatives}
}

function test::create_ssl_certificate() {
  local server_name="${1}"; shift;
  local alternatives=$(test::alternatives "${@}")
  printf "%0.0s\n" {0..6} | \
    ${SIGNING_CA_DIR}/bin/create-ssl -s ${server_name} ${alternatives}
}

function test::verify_ssl_certificate() {
  local certificate=${1}; shift;
  test::dump_certificate "${certificate}" | \
    grep -q "Netscape Cert Type"
}

function test::create_client_certificate() {
  local client_name=${1}; shift;
  local cert_name=${1}; shift;
  printf "%0.0s\n" {0..6} | \
    ${SIGNING_CA_DIR}/bin/create-client -c ${client_name} -n ${cert_name}
}

function test::create_client_o_certificate() {
  local client_name=${1}; shift;
  printf "%0.0s\n" {0..6} | \
    ${SIGNING_CA_DIR}/bin/create-client-o -c ${client_name}
}

function test::revoke_certificate() {
  local certificate=${1}; shift;
  printf "1\ny\n" | \
    ${SIGNING_CA_DIR}/bin/revoke-cert \
    -c ${SIGNING_CA_DIR}/certs/${certificate}
}

function test::verify_revokation() {
  local certificate=${1}; shift;
  local serial=$(test::fetch_serial ${certificate})

  openssl crl \
    -noout \
    -text \
    -in ${SIGNING_CA_DIR}/crl/ca.crl | \
    grep -q "Serial Number: ${serial}"
}

function test::usage() {
  local scripts=( "${@}" )
  for script in "${scripts[@]}"; do
    ${SIGNING_CA_DIR}/bin/${script} -h
  done
}

function test::final_message() {
  local exit_code=$?
  [[ ${FINAL_MESSAGE} != true ]] && return 0
  if (( ${exit_code} > 0 )); then
    echo -e "\e[31m"
    echo ${DELIMITER}
    echo "There were errors in '$(module_name)' while executing the test suite"
    echo ${DELIMITER}
    echo -e "\e[0m"
  else
    echo -e "\e[32m"
    echo ${DELIMITER}
    echo All tests passed
    echo ${DELIMITER}
    echo -e "\e[0m"
  fi
  exit ${exit_code}
}

# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------
parse_options "$@"
test::setup
test::create_root_ca
test::create_signing_ca
test::create_server_certificate '*.acme.com' 'acme.com'
test::create_ssl_certificate 'ssl.acme.com' 'acme.com'
test::verify_ssl_certificate 'ssl-acme-com.server.crt'
test::create_client_certificate 'bob' 'bob_builder'
test::create_client_o_certificate 'jane'
test::revoke_certificate 'star-acme-com.server.crt'
test::verify_revokation 'star-acme-com.server.crt'
test::revoke_certificate 'ssl-acme-com.server.crt'
test::verify_revokation 'ssl-acme-com.server.crt'
test::revoke_certificate 'bob-builder.client.crt'
test::verify_revokation 'bob-builder.client.crt'
test::usage \
  create-client \
  create-client-o \
  create-root-ca \
  create-server \
  create-signing-ca \
  create-ssl \
  revoke-cert
