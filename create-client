#!/usr/bin/env bash
# Derek Moore <derek.moore@gmail.com>
# Tiago Possato <tiago.possato@yahoo.com.br>

# -----------------------------------------------------------------------------
# Setup
# -----------------------------------------------------------------------------
set -o errexit
set -o nounset
set -o pipefail

# -----------------------------------------------------------------------------
# Globals
# -----------------------------------------------------------------------------
declare -r SCRIPT=${0##*/}
declare -- CN=
declare -- CA_DIR=
declare -r BIN_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
declare -- CERT_NAME=
declare -- SAFE_NAME=
declare -r CERT_SUFFIX=client
declare -x SAN="${SAN:-}"
declare -r SAN_PREFIX="email"
declare -x CA_PASS="${CA_PASS:-}"
declare -x PKCS12_PASS="${PKCS12_PASS:-}"
declare -- PKCS12=false
declare -- APPEND_CHAIN=false


# -----------------------------------------------------------------------------
# Functions
# -----------------------------------------------------------------------------
function usage() {
  local exit_code=${1:-2}
  cat <<USAGE

  Usage:
    ${SCRIPT} <options>

  Description:
    Issues a client or user certificate for COMMON_NAME.

  Options:
    -h | --help            This message
    -n | --name CERT_NAME  File name for the certifcate.
                           Default: COMMON_NAME
    -c | --cn COMMON_NAME  Client name (commonName) for the certificate.
    -s | --san SAN         Set a subject alternative name for the certificate.
                           Can be used muliple times.
    -p | --pkcs12          Create a pkcs12 bundle from key and certificate.
    -a | --append-chain    Append chain if ca/chain.pm exists.


USAGE
  exit ${exit_code}
}

function parse_options() {
  while (( $# > 0 )); do
    case ${1} in
    -c|--cn)           shift; CN=${1};;
    -n|--name)         shift; CERT_NAME=${1};;
    -s|--san)          shift; SAN="${SAN}, ${SAN_PREFIX}:${1}";;
    -p|--pkcs12)       PKCS12=true;;
    -h|--help)         usage 0;;
    -a|--append-chain) APPEND_CHAIN=true;;
    *)                 usage 1;;
    esac
    shift
  done
}

function validate_options() {
  if [[ -z ${CN} ]]; then
    echo -e "\n Missing option for COMMON_NAME"
    usage 1
  fi

  CERT_NAME=${CERT_NAME:-${CN}}
}

function source_files() {
  source ${BIN_DIR}/functions
  [[ -f "${BIN_DIR}/defaults.conf" ]] &&
    source ${BIN_DIR}/defaults.conf
}

function create_safe_name() {
  SAFE_NAME=$(to_safe_name "${CERT_NAME}")
}

function create_client_conf() {
  # Generate the client cert openssl config
  export CA_USERNAME=${CN}
  template "${BIN_DIR}/templates/client.tpl" "conf/${SAFE_NAME}.client.conf"
  if [[ -z ${SAN} ]]; then
    sed -i -e 's/^\(subjectAltName.*=.*\)/#\1/' \
      "conf/${SAFE_NAME}.${CERT_SUFFIX}.conf"
  fi
}

# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------
parse_options "${@}"
validate_options
source_files
assemble_san
create_safe_name
message "Creating new client certificate for '${CN}' with:" \
  "CERT_NAME: '${CERT_NAME}'" \
  "COMMON_NAME: '${CN}'"
create_safe_name
pushd ${BIN_DIR}/.. > /dev/null
check_existing_configuration "${SAFE_NAME}" client
create_client_conf
ask_ca_passphrase 'signing'
create_csr "client" "${SAFE_NAME}"
sign_csr "client" "${SAFE_NAME}"
append_ca_chain
create_pkcs12
popd > /dev/null
message "Client certificate created."
