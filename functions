#!/usr/bin/env bash
# Derek Moore <derek@ripple.com>
# Urs Roesch <github@bun.ch>

# -----------------------------------------------------------------------------
# print horizontal line 80 chars wide
# -----------------------------------------------------------------------------
function ---- {
  [[ -z ${DELIMITER:-} ]] && DELIMITER=$(printf "%0.1s" -{0..80})
  printf "%s\n" ${DELIMITER}
}

# -----------------------------------------------------------------------------
# Print message with delimiters
# -----------------------------------------------------------------------------
function message() {
  local -a messages=( "${@}" )
  echo
  ----
  for message in "${messages[@]}"; do
    printf "${message}\n"
  done
  ----
}

# -----------------------------------------------------------------------------
# list of binaries to be copied
# -----------------------------------------------------------------------------
function binaries() {
  # Binaries copied during install
  local -a binaries=(
    create-root-ca
    create-signing-ca
    create-server
    create-client
    create-ssl
    revoke-cert
    functions
  )
  echo ${binaries[@]}
}

# -----------------------------------------------------------------------------
# Create safe name for storing to filesystem
# -----------------------------------------------------------------------------
function to_safe_name() {
  local input="${1}"; shift;
  local output=
  output=${input//\*/star}
  output=${output//[^A-Za-z0-9-]/-}
  echo ${output}
}

# -----------------------------------------------------------------------------
# Replicate the existing binary directory
# -----------------------------------------------------------------------------
function copy_scripts() {
  for bin in $(binaries); do
    cp ${BIN_DIR}/${bin} bin/
  done
  cp -r ${BIN_DIR}/templates bin/
}

# -----------------------------------------------------------------------------
# overrride user name
# -----------------------------------------------------------------------------
function override() {
  local target=${1#USER_}
  NAME=${2//[^A-Za-z0-9-]/-}
  eval "${target}=\$${1}"
}

# -----------------------------------------------------------------------------
# Return the absolute path of a file
# -----------------------------------------------------------------------------
function fullpath() {
  local path=${1}; shift;
  cd $(dirname ${path})
  echo "${PWD}/$(basename ${path})"
}

# -----------------------------------------------------------------------------
# template TEMPLATE_FILE DESTINATION_FILE
#
# Performs variable interpolation on TEMPLATE_FILE and copies
# the result to DESTINATION_FILE. All strings in TEMPLATE_FILE
# that match {{CA_*}} will be replaced with the contents of the
# environment variable with the same name.
#
# -----------------------------------------------------------------------------
function template() {
  local template=${1}; shift;
  local output=${1}; shift;
  local regex=""
  for var in ${!CA_*}; do
    regex="${regex} s#{{\s*${var}\s*}}#${!var}#g; "
  done
  sed -e "${regex}" < ${template} > ${output}
}

# -----------------------------------------------------------------------------
# Check if configuration for certificate already exists.
# -----------------------------------------------------------------------------
function check_existing_configuration() {
 local safe_name=${1}; shift;
 local type=${1}; shift;
 if [[ -f conf/${safe_name}.${type}.conf ]]; then
   echo "Configuration already exists for '${CERT_NAME}', exiting."
   exit 1
 fi
}

# -----------------------------------------------------------------------------
# init_ca_home CA_PATH
#
# Initializes a CA directory skeleton at PATH
# -----------------------------------------------------------------------------
function init_ca_home() {
  local home=${1}; shift;

  # Ensure we're initializing an empty directory
  if [ -d "${home}" ]; then
    echo "${home} already exists, exiting"
    exit 1
  fi

  if ! mkdir -p "${home}"; then
    echo "Unable to create ${home}, exiting"
    exit 1
  fi

  pushd ${home} > /dev/null

  # Create top-level CA structure
  mkdir -p ca
  mkdir -p ca/db
  mkdir -p ca/private

  mkdir -p archive
  mkdir -p bin
  mkdir -p certs
  mkdir -p crl
  mkdir -p conf
  mkdir -p csr
  mkdir -p private

  # Secure key directories
  chmod 0700 ca/private
  chmod 0700 private

  # Create empty databases
  touch ca/db/certificate.db
  touch ca/db/certificate.db.attr
  echo 01 > ca/db/crt.srl
  echo 01 > ca/db/crl.srl

  popd > /dev/null
}

# -----------------------------------------------------------------------------
# generate_conf CONF
#
# Generate the ca.conf for new root and signing CAs
# -----------------------------------------------------------------------------
function generate_conf() {
  local dest=${1}; shift;
  local CA_NAME=$(basename ${CA_DIR})

  echo -n "1. Short label for new CA [${CA_NAME}]: "
  read NAME
  if [ -n "${NAME}" ]; then
    CA_NAME=${NAME//[^A-Za-z0-9-]/-}
  fi

  echo -n "2. Domain name for new CA [${CA_DOMAIN}]: "
  read DOMAIN
  if [ -n "${DOMAIN}" ]; then
    CA_DOMAIN=${DOMAIN}
  elif [ -z "${CA_DOMAIN}" ]; then
    echo "Domain is required."
    exit 1
  fi

  message "CRL URL will be http://${CA_DOMAIN}/ca/${CA_NAME}.crl"

  echo -n "3. Default country code for new certificates [${CA_CERT_C}]: "
  read CERT_C
  if [ -n "${CERT_C}" ]; then
    CA_CERT_C=${CERT_C}
  fi

  echo -n "4. Default state for new certificates [${CA_CERT_ST}]: "
  read CERT_ST
  if [ -n "${CERT_ST}" ]; then
    CA_CERT_ST=${CERT_ST}
  fi

  echo -n "5. Default city for new certificates [${CA_CERT_L}]: "
  read CERT_L
  if [ -n "${CERT_L}" ]; then
    CA_CERT_L=${CERT_L}
  fi

  echo -n "6. Default org for new certificates [${CA_CERT_O}]: "
  read CERT_O
  if [ -n "${CERT_O}" ]; then
    CA_CERT_O=${CERT_O}
  fi

  echo -n "7. Default org unit for new certificates [${CA_CERT_OU}]: "
  read CERT_OU
  if [ -n "${CERT_OU}" ]; then
    CA_CERT_OU=${CERT_OU}
  fi

  echo

  CA_CERT_CN="${CA_CERT_O} Certificate Authority"
  echo -n "8. Common Name for CA certificate [${CA_CERT_CN}]: "
  read CERT_CN
  if [ -n "${CERT_CN}" ]; then
    CA_CERT_CN=${CERT_CN}
  fi

  cat > ${dest} << EOF
CA_DOMAIN="${CA_DOMAIN}"
CA_NAME="${CA_NAME}"

CA_CERT_C="${CA_CERT_C}"
CA_CERT_ST="${CA_CERT_ST}"
CA_CERT_L="${CA_CERT_L}"
CA_CERT_O="${CA_CERT_O}"
CA_CERT_OU="${CA_CERT_OU}"
CA_CERT_CN="${CA_CERT_CN}"

CA_KEY_CIPHER=${CA_KEY_CIPHER}
EOF
}

# -----------------------------------------------------------------------------
# Passphrase dialog for CA key passwords
# -----------------------------------------------------------------------------
function ask_passphrase() {
  local ca_name="${1}"; shift
  local prompt="Enter passphrase for encrypting the ${ca_name} CA key: "
  [[ -n ${CA_PASS:-} ]] && { export CA_PASS; return 0; }
  echo
  echo -n "${prompt}"
  read -s pass1
  echo
  echo -n "Verifying - ${prompt}"
  read -s pass2
  echo

  if [[ ${pass1} != ${pass2} ]]; then
    echo "Passphrases did not match, exiting."
    exit 1
  fi
  export CA_PASS=${pass1}
}

# -----------------------------------------------------------------------------
# Passphrase dialog for exporting CA
# -----------------------------------------------------------------------------
function ask_ca_passphrase() {
  local ca_name=${1:-signing}
  # only use for non root CA requests
  [[ ${CA_TYPE:-} == root ]] && return 0

  function @password_prompt() {
    printf "\nEnter passphrase for ${ca_name} CA key: " 3>&1 1>&2 2>&3
    read -s ca_pass;
    echo 3>&1 1>&2 2>&3
    echo -n "${ca_pass}"
  }

  case ${ca_name} in
  signing) export CA_PASS=${CA_PASS:-$(@password_prompt)};;
  root)    export CA_PARENT_PASS=${CA_PARENT_PASS:-$(@password_prompt)};;
  esac
}

# -----------------------------------------------------------------------------
# Generate the CA openssl config
# -----------------------------------------------------------------------------
function copy_ca_template() {
  local ca_type=${1:-root}
  template "${BIN_DIR}/templates/${ca_type}.tpl" "conf/ca.conf"
}

# -----------------------------------------------------------------------------
# Create private key for the CA
# -----------------------------------------------------------------------------
function create_ca_key() {
  message "Create ${CA_TYPE} CA key 'ca/private/ca.key'"
  # Create the signing CA key
  openssl genrsa \
    ${CA_KEY_CIPHER:+-${CA_KEY_CIPHER}} \
    -out ca/private/ca.key \
    -passout env:CA_PASS \
    2048
  chmod 0400 ca/private/ca.key
}

# -----------------------------------------------------------------------------
# Create certification request for the CA
# -----------------------------------------------------------------------------
function create_csr() {
  local type=${1}; shift;
  local safe_name=${1}; shift;

  openssl req \
    -new \
    -nodes \
    -config conf/${safe_name}.${type}.conf \
    -keyout private/${safe_name}.${type}.key \
    -out csr/${safe_name}.${type}.csr
  chmod 0400 private/${safe_name}.${type}.key
}

# -----------------------------------------------------------------------------
# Sign certification request with the CA key
# -----------------------------------------------------------------------------
function sign_csr() {
  local type=${1}; shift;
  local safe_name=${1}; shift;
  local days=${1:-730};

  openssl ca \
    -batch \
    -notext \
    -config conf/ca.conf \
    -in csr/${safe_name}.${type}.csr \
    -out certs/${safe_name}.${type}.crt \
    -days ${days} \
    -extensions ${type}_ext \
    -passin env:CA_PASS
}

# -----------------------------------------------------------------------------
# Create certification request for the CA
# -----------------------------------------------------------------------------
function create_ca_csr() {
  # Create the signing CA csr
  openssl req \
    -new \
    -batch \
    -config conf/ca.conf \
    -key ca/private/ca.key \
    -out ca/ca.csr \
    -passin env:CA_PASS
}

# -----------------------------------------------------------------------------
# Create the revokation list for the CA
# -----------------------------------------------------------------------------
function create_ca_crl() {
  message "Create ${CA_TYPE:-} CA CRL 'crl/ca.crl'"
  # Create the root CRL
  openssl ca \
    -gencrl \
    -batch \
    -config conf/ca.conf \
    -out crl/ca.crl \
    -passin env:CA_PASS
}

# -----------------------------------------------------------------------------
# Assemble commonName and subjectAltNames to one string
# -----------------------------------------------------------------------------
function assemble_san() {
  # Normally an array would be used here but for
  # backward compatibilty with bash v3.0 we do it
  # the old fashioned way
  SAN="${SAN_PREFIX}:${CN}${SAN}"
  export SAN=${SAN}
}
