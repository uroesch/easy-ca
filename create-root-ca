#!/usr/bin/env bash
# Derek Moore <derek.moore@gmail.com>

# -----------------------------------------------------------------------------
# Setup
# -----------------------------------------------------------------------------
set -o errexit
set -o nounset
set -o pipefail

# -----------------------------------------------------------------------------
# Globals
# -----------------------------------------------------------------------------
declare -r SCRIPT=${0##*/}
declare -r BIN_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
declare -- PARENT=${BIN_DIR}/..
declare -- CA_KEY_CIPHER=${CA_KEY_CIPHER:-}
declare -- CA_DIR=
declare -- CA_PASS=
declare -x SAN=${SAN:-}

# -----------------------------------------------------------------------------
# Functions
# -----------------------------------------------------------------------------
function usage() {
  local exit_code=${1:-1}
  cat <<USAGE

  Usage:
    ${SCRIPT} <options>

  Description:
    Initializes a new ${CA_DESCRIPTION} in CA_DIR.

  Options:
    -h | --help            This message.
    -d | --ca-dir CA_DIR   Target directory to be created and initialized.
    -s | --san SAN         Set a subject alternative name for the CA.

USAGE
  exit ${exit_code}
}

function parse_options() {
  while (( $# > 0 )); do
    case ${1} in
    -d|--ca-dir) shift; CA_DIR=${1};;
    -s|--san)    shift; SAN=${1};;
    -h|--help)   usage 0;;
    *)           usage 1;;
    esac
    shift
  done
}

function validate_options() {
  if [[ -z ${CA_DIR} ]]; then
    usage 1
  fi
}

function determine_operation_mode() {
  case ${SCRIPT} in
  *-root-ca)
    CA_TYPE=root
    CA_DESCRIPTION="${CA_TYPE} CA"
    ;;
  *-signing-ca)
    CA_TYPE=signing
    CA_DESCRIPTION="${CA_TYPE} sub-CA"
    ;;
  esac
}

function source_files() {
  source ${BIN_DIR}/functions
  [[ -f "${BIN_DIR}/defaults.conf" ]] &&
    source ${BIN_DIR}/defaults.conf
}

function create_root_ca_certificate() {
  message "Create ${CA_TYPE} CA certificate '$(pwd)/ca/ca.crt'"
  # Create the root CA certificate
  openssl ca \
    -selfsign \
    -batch \
    -notext \
    -config conf/ca.conf \
    -in ca/ca.csr \
    -out ca/ca.crt \
    -days 3652 \
    -extensions root_ca_ext \
    -passin env:CA_PASS
}

function create_signing_ca_certificate() {
  message "Create ${CA_TYPE} CA certrificate '${CA_DIR}/ca/ca.crt'"
  pushd ${PARENT} > /dev/null
  openssl ca \
    -batch \
    -notext \
    -config conf/ca.conf \
    -in ${CA_DIR}/ca/ca.csr \
    -out ${CA_DIR}/ca/ca.crt \
    -days 3652 \
    -extensions signing_ca_ext \
    -passin env:CA_PARENT_PASS
  popd > /dev/null
}

function create_ca_chain() {
  # Create the chain bundle if this is a sub-CA
  if [[ -f ${PARENT}/ca/chain.pem ]]; then
    cat ${PARENT}/ca/chain.pem > ca/chain.pem
  elif [[ -f ${PARENT}/ca/ca.crt ]]; then
    cat ${PARENT}/ca/ca.crt > ca/chain.pem
  fi
  cat ca/ca.crt >> ca/chain.pem
}

function create_ca_certificate() {
  case ${CA_TYPE} in
  root)
    create_root_ca_certificate
    ;;
  signing)
    create_signing_ca_certificate
    create_ca_chain
    ;;
  esac
}

# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------
determine_operation_mode
parse_options "${@}"
validate_options
source_files
message "Creating new ${CA_DESCRIPTION} in '${CA_DIR}'"
init_ca_home "${CA_DIR}"
generate_conf "${CA_DIR}/bin/defaults.conf"
source "${CA_DIR}/bin/defaults.conf"
ask_passphrase "${CA_TYPE}"
ask_ca_passphrase "root"
pushd "${CA_DIR}" > /dev/null
copy_ca_template "${CA_TYPE}"
create_ca_key
create_ca_csr
create_ca_certificate
create_ca_crl
copy_scripts
popd > /dev/null
message "${CA_DESCRIPTION} initialized."
